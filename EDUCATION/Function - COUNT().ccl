; This page is a part of a Book.
; Last modified on Oct 12, 2021
; The version of this page that you are viewing is the most current, approved content.
; The COUNT( ) function counts individual records within the specified break.

; COUNT( ) can be used in the FOOT REPORT or FOOT group_expression sections of a Discern Explorer Select command.

; COUNT( ) can be used in the select list in an aggregate or group by query and as an OLAP expression using the OVER( )
; clause if you are using Discern Explorer version 8.8.0 or higher and Oracle 10g or higher.

; Non-RDBMS tables should not be used in the FROM clause when you use COUNT() in the Select list. When you use non-RDBMS
; tables, the COUNT() function should only be used in the FOOT REPORT or FOOT group_expression section of a Discern Explorer Select command.

; The KEEP option requires Discern Explorer version 8.10.3 or higher.

; Syntax
; COUNT(expression [WHERE qualification]) ["template;display_qualifier;display_format"]

; exp_name = COUNT([param{,param}]) [KEEP(DENSE_RANK FIRST|LAST ORDER BY expression[DESC])]
;   OVER (
;   [PARTITION BY expression{,expression}]
;   [ORDER BY expression[DESC],{expression[DESC]}]
;   [RANGE|ROWS BETWEEN UNBOUNDED|int PRECEDING  |  UNBOUNDED|int FOLLOWING  |  CURRENT ROW
;           AND BETWEEN UNBOUNDED|int PRECEDING  |  UNBOUNDED|int FOLLOWING  |  CURRENT ROW ]
;       )
; Metasymbols
; For a description of template, display_qualifier, and display_format, see the metasymbols help topic.

; expression
; An expression is the highest level metasymbol among constants, column names, variables, and so on.

; exp_name
; The name to use as the column heading and select expression of the value returned by the COUNT() function.

; int
; An integer value.

; Examples
; This example counts the number of people with person_ids greater than 100000. It displays all person_ids that qualify,
; and prints the total number in the FOOT REPORT section.

SELECT P.PERSON_ID
FROM PERSON P
WHERE P.PERSON_ID > 100000
HEAD REPORT
     ROW +0
DETAIL
     COL 10 P.PERSON_ID ROW + 1
FOOT REPORT
     COL 10 "TOTAL:"
     COL +1 COUNT(P.PERSON_ID) ROW + 1
WITH FORMAT, SEPARATOR = " "
The following example returns the total number of rows on the Person table:

; SELECT COUNT(*) FROM PERSON
; In the following example, ALL_COUNT is the count of all the result_value_numeric values returned by the query.
; CUM_COUNT is a count of the rows that were updated each day. RES_COUNT is a count of the rows that have the same
; result_value_numeric value that were updated each day.

SELECT
	DAY = DATETIMETRUNC(P.UPDT_DT_TM,"DD") "@SHORTDATE"
	,P.RESULT_VALUE_NUMERIC
	,ALL_COUNT = COUNT(P.RESULT_VALUE_NUMERIC) OVER( )
	,CUM_COUNT = COUNT(P.RESULT_VALUE_NUMERIC) OVER(
			PARTITION BY DATETIMETRUNC(P.UPDT_DT_TM,"DD")
			)
	,RES_COUNT = COUNT(P.RESULT_VALUE_NUMERIC) OVER(
			PARTITION BY DATETIMETRUNC(P.UPDT_DT_TM,"DD")
			ORDER BY P.RESULT_VALUE_NUMERIC
			)
FROM
	PERFORM_RESULT   P

WHERE P.UPDT_DT_TM BETWEEN CNVTLOOKBEHIND("6,M") AND CNVTDATETIME(CURDATE, CURTIME3)
	AND P.RESULT_VALUE_NUMERIC > 0.0

ORDER BY
	DAY
	,P.RESULT_VALUE_NUMERIC
WITH SEPARATOR=" ", FORMAT




; The following example gets information about a person's three most recent encounters
;when the reg_dt_tm for the encounter was in the past month. Count() is used to get a
;count for the encounters for each encounter type. The Keep option is also used with Count()
;to get the a count of all the first encounters for each encounter type.

select into $outdev
	e.person_id,
    e.encntr_id,
    e.e_rank,
    count_all = count(e.encntr_id) over(partition by e.encntr_type_cd),
    count_1st_encntr = count(e.encntr_id) keep (dense_rank first order by e.e_rank) over(partition by e.encntr_type_cd),
    encntr_type_disp = uar_get_code_display(e.encntr_type_cd)
from  /* inline select to create table e */
 	((select
		e2.person_id
		, e2.reg_dt_tm
		, e2.disch_dt_tm
		, e2.encntr_id
		, e_rank = rank() over(partition by e2.person_id order by e2.encntr_id desc)
		, e2.encntr_type_cd
	from
		encounter   e2
	where e2.reg_dt_tm between cnvtlookbehind("1,m") and cnvtdatetime(curdate,curtime3)
		and e2.disch_dt_tm is not null

	order by
		e2.person_id
		, e2.encntr_id

	with sqltype("f8","dq8","dq8","f8","i4","f8"))
			 e)

plan e where e.e_rank in (1.0, 2.0, 3.0) ;get the three most recent encounters for each person
order by
		encntr_type_disp
		,e.person_id
		,e.e_rank desc

with format,separator = " ",time = 30
