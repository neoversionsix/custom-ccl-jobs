select	; Pathology collection requirements alignment
	activity_type = uar_get_code_display (oc.activity_type_cd)
	, activity_rank = dense_rank() over (partition by 0
	order by
	cv_cat.display_key
	, cv_act.display_key
	)
	, activity_subtype = uar_get_code_display (oc.activity_subtype_cd)
	, sub_act_rank = dense_rank() over (partition by 0
	order by
	cv_cat.display_key
	, cv_act.display_key
	, nullval(cv_sub_act.display_key, 0)
	)
	, primary_mnemonic = oc.primary_mnemonic
	, primary_mnemonic_active = ocs_prim.active_ind
	, orderable_type = evaluate (oc.orderable_type_flag
	, 0, "Standard"
          	, 1, "Standard"
          	, 2, "Supergroup"
          	, 3, "CarePlan"
          	, 4, "AP Special"
          	, 5, "Department Only"
          	, 6, "Order Set"
          	, 7, "Home Health Problem"
          	, 8, "Multi-ingredient"
          	, 9, "Interval Test"
         	, 10, "Freetext")
	, alias_outbound = if (cvo_oc.code_value > 0 and cvo_oc.alias = " ") "<sp>"
	else cvo_oc.alias
	endif
	, catalog_code = oc.catalog_cd
	, primary_rank = dense_rank() over (partition by 0
	order by
	cv_cat.display_key
	, cv_act.display_key
	, nullval(cv_sub_act.display_key, 0)
	, cnvtupper (oc.primary_mnemonic)
	)
	, specimen_type = uar_get_code_display (pst.specimen_type_cd)
	, accession_class = uar_get_code_display (pst.accession_class_cd)
	, default_collection_method = uar_get_code_display (pst.default_collection_method_cd)
	, service_resource = if (coll_q.catalog_cd = 0) ""
	elseif (coll_q.service_resource_cd = 0) "(All)"
	else uar_get_code_display (coll_q.service_resource_cd)
	endif
	, age_from = if (coll_q.catalog_cd = 0) ""
	elseif (mod(coll_q.age_from_minutes, 525960) = 0) cnvtstring(coll_q.age_from_minutes/525960)	; minutes/year (note: in 2018 code, one year = 365.25 days. Prior to 2018,  one year = 365 days = 525600 minutes)
	elseif (mod(coll_q.age_from_minutes, 43200) = 0) cnvtstring(coll_q.age_from_minutes/43200)	; minutes/month
	elseif (mod(coll_q.age_from_minutes, 10080) = 0) cnvtstring(coll_q.age_from_minutes/10080)	; minutes/week
	elseif (mod(coll_q.age_from_minutes, 1440) = 0) cnvtstring(coll_q.age_from_minutes/1440)	; minutes/day
	elseif (mod(coll_q.age_from_minutes, 60) = 0 ) cnvtstring(coll_q.age_from_minutes/60)	; minutes/hour
	else cnvtstring(coll_q.age_from_minutes)
	endif
	, units = if (coll_q.catalog_cd = 0) ""
	elseif (coll_q.age_from_minutes = 0) "Minutes"
	elseif (mod(coll_q.age_from_minutes, 525960) = 0) "Years"	; minutes/year (note: in 2018 code, one year = 365.25 days. Prior to 2018,  one year = 365 days = 525600 minutes)
	elseif (mod(coll_q.age_from_minutes, 43200) = 0) "Months"	; minutes/month
	elseif (mod(coll_q.age_from_minutes, 10080) = 0) "Weeks"	; minutes/week
	elseif (mod(coll_q.age_from_minutes, 1440) = 0) "Days"	; minutes/day
	elseif (mod(coll_q.age_from_minutes, 60) = 0) "Hours"	; minutes/hour
	else "Minutes"
	endif
	, age_to = if (coll_q.catalog_cd = 0) ""
	elseif (mod(coll_q.age_to_minutes, 525960) = 0) cnvtstring(coll_q.age_to_minutes/525960)	; minutes/year (note: in 2018 code, one year = 365.25 days. Prior to 2018,  one year = 365 days = 525600 minutes)
	elseif (mod(coll_q.age_to_minutes, 43200) = 0) cnvtstring(coll_q.age_to_minutes/43200)	; minutes/month
	elseif (mod(coll_q.age_to_minutes, 10080) = 0) cnvtstring(coll_q.age_to_minutes/10080)	; minutes/week
	elseif (mod(coll_q.age_to_minutes, 1440) = 0) cnvtstring(coll_q.age_to_minutes/1440)	; minutes/day
	elseif (mod(coll_q.age_to_minutes, 60) = 0 ) cnvtstring(coll_q.age_to_minutes/60)	; minutes/hour
	else cnvtstring(coll_q.age_to_minutes)
	endif
	, units = if (coll_q.catalog_cd = 0) ""
	elseif (coll_q.age_to_minutes = 0) "Minutes"
	elseif (mod(coll_q.age_to_minutes, 525960) = 0) "Years"	; minutes/year (note: in 2018 code, one year = 365.25 days. Prior to 2018,  one year = 365 days = 525600 minutes)
	elseif (mod(coll_q.age_to_minutes, 43200) = 0) "Months"	; minutes/month
	elseif (mod(coll_q.age_to_minutes, 10080) = 0) "Weeks"	; minutes/week
	elseif (mod(coll_q.age_to_minutes, 1440) = 0) "Days"	; minutes/day
	elseif (mod(coll_q.age_to_minutes, 60) = 0) "Hours"	; minutes/hour
	else "Minutes"
	endif
	, coll_priority = if (coll_q.catalog_cd = 0) ""
	elseif (coll_q.collection_priority_cd = 0)  "(All)"
	else uar_get_code_display (coll_q.collection_priority_cd)
	endif
	, min_vol = if (coll_q.catalog_cd = 0) ""
	else cnvtstring(coll_q.min_vol,10,1)	; returns up to 10 digits, with one decimal place accuracy.
	endif
	, container = uar_get_code_display (coll_q.spec_cntnr_cd)
	, collection_class = uar_get_code_display (coll_q.coll_class_cd)
	, special_handling = if (coll_q.catalog_cd = 0) ""
	elseif (coll_q.spec_hndl_cd = 0) "(None)"
	else uar_get_code_display (coll_q.spec_hndl_cd)
	endif
	, lab_handling = uar_get_code_display (lab_hand.lab_handling_cd)
	, lab_handling_sequence = if(lab_hand.coll_info_seq = 0) ""
	else cnvtstring(lab_hand.lab_handling_order_seq)
	endif
	, alternate_container_min_vol = if (alt_cntr.coll_info_seq = 0) ""
	else cnvtstring(alt_cntr.min_vol_amt,10,1)
	endif
	, alternative_container_container = uar_get_code_display (alt_cntr.spec_cntnr_cd)
	, alternative_container_collection_class = uar_get_code_display (alt_cntr.coll_class_cd)
	, alternative_container_special_handling = uar_get_code_display (alt_cntr.spec_hndl_cd)
	, add_labels = if (coll_q.catalog_cd = 0) ""
	else cnvtstring(coll_q.additional_labels)
	endif
	, aliq = if (coll_q.aliquot_ind = 1) "x"
	else ""
	endif
	, aliquot_min_vol = if (aliq_q.coll_info_seq = 0) ""
	else cnvtstring(aliq_q.min_vol,10,1)	; returns up to 10 digits, with one decimal place accuracy.
	endif
	, aliquot_container = uar_get_code_display (aliq_q.spec_cntnr_cd)
	, aliquot_collection_class = uar_get_code_display (aliq_q.coll_class_cd)
	, aliquot_special_handling = uar_get_code_display (aliq_q.spec_hndl_cd)
	, aliquot_net = if (aliq_q.net_ind = 1) "x"
	else ""
	endif
	, collection_requirements_sequence = if(coll_q.catalog_cd = 0)  ""
	else cnvtstring(coll_q.sequence)
	endif
	, primary_rank = dense_rank() over (partition by 0
	order by
;	cv_cat.display_key
	cv_act.display_key
	, nullval(cv_sub_act.display_key, 0)	; 'nullval' used as dense_rank fails when cv_sub_act.display_key = null
	, cnvtupper(oc.primary_mnemonic)
	)

from
	order_catalog   oc
	, (left join prsnl p_oc on p_oc.person_id = oc.updt_id)
	, (left join order_catalog_synonym  ocs_prim on ocs_prim.catalog_cd =  oc.catalog_cd
	and ocs_prim.mnemonic_type_cd = 2583	; code value for 'Primary' from code set 6011
	)
	, (left join prsnl p_ocs_prim on p_ocs_prim.person_id = ocs_prim.updt_id)
	, (left join code_value_outbound cvo_oc on cvo_oc.code_value = oc.catalog_cd
	and cvo_oc.contributor_source_cd = 10630393	; code value for 'WH_LOCAL' contributor source
	)
	, (left join procedure_specimen_type pst on pst.catalog_cd = oc.catalog_cd)
	, (left join prsnl p_pst on p_pst.person_id = pst.updt_id)
	, (left join collection_info_qualifiers coll_q on coll_q.catalog_cd = pst.catalog_cd
	and coll_q.specimen_type_cd = pst.specimen_type_cd
	)
	, (left join prsnl p_coll_q on p_coll_q.person_id = coll_q.updt_id)
	, (left join lab_handling lab_hand on lab_hand.coll_info_seq = coll_q.sequence)
	, (left join alt_collection_info alt_cntr on alt_cntr.coll_info_seq = coll_q.sequence)
	, (left join aliquot_info_qualifiers aliq_q on aliq_q.coll_info_seq = coll_q.aliquot_seq
	and aliq_q.aliquot_seq > 0
	)
	, (left join prsnl p_aliq_q on p_aliq_q.person_id = aliq_q.updt_id)
	, (left join code_value cv_cat on cv_cat.code_value = oc.catalog_type_cd)
	, (left join code_value cv_act on cv_act.code_value = oc.activity_type_cd)
	, (left join code_value cv_sub_act on cv_sub_act.code_value = oc.activity_subtype_cd)

plan 	oc
where 	oc.catalog_type_cd = 2513 	; code value for 'Laboratory' from code set 6000
and	oc.orderable_type_flag not in (2,3,6,8)	; exclude 'Supergroup','CarePlan', 'Order Set', and 'Multi-ingredient' (IV Set) orderables
;and	cnvtupper (oc.primary_mnemonic) = "Aspirin*"
;and	cnvtupper (oc.primary_mnemonic) < "M*"	; use these if the audit fails in any domain
;and	cnvtupper (oc.primary_mnemonic) >= "M*"	; (synonym_rank may be corrupted between the audit divisions)
;and	oc.catalog_cd = 1234567
join	p_oc
join 	ocs_prim
join	p_ocs_prim
join	cvo_oc	; orderable inbound alias
join	pst
join	p_pst
join	coll_q
join	p_coll_q
join	lab_hand
join	alt_cntr
join	aliq_q
join	p_aliq_q
join	cv_cat
join	cv_act
join	cv_sub_act


order by
;	catalog_rank
	activity_rank
	, sub_act_rank
	, primary_rank
	, uar_get_code_display(pst.specimen_type_cd)	; CollReqMaint.exe does not honour collation sequence of the specimen type code value, nor alphabetical of the display value
	, coll_q.service_resource_cd
	, coll_q.age_from_minutes
	, coll_q.age_to_minutes
	, coll_q.sequence
	, lab_hand.lab_handling_order_seq
	, 0

with	time = 5